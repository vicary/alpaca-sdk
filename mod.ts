// If `APCA_DEBUG` false, console.debug() should not log anything.
if (JSON.parse(Deno.env.get("APCA_DEBUG") || "false")) {
  console.debug = () => {};
} else {
  // Prefix all debug logs with "@alpacahq/typescript-sdk" to make it easier to
  // for users to filter out debug logs from this SDK.
  console.debug = (...args) =>
    console.log("@alpacahq/typescript-sdk:debug", ...args);
}
export {
  getCryptoBars,
  getCryptoQuotes,
  getCryptoQuotesLatest,
  getCryptoSnapshots,
  getCryptoTrades,
  getCryptoTradesLatest,
  getForexRates,
  getLatestCryptoBars,
  getLatestCryptoOrderbooks,
  getLatestForexRates,
  getLogo,
  getNews,
  getOptionsBars,
  getOptionsExchanges,
  getOptionsSnapshots,
  getOptionsTrades,
  getOptionsTradesLatest,
  getStocksAuctions,
  getStocksBars,
  getStocksBarsLatest,
  getStocksConditions,
  getStocksCorporateActions,
  getStocksExchangeCodes,
  getStocksMarketMovers,
  getStocksMostActives,
  getStocksQuotes,
  getStocksQuotesLatest,
  getStocksSnapshots,
  getStocksTrades,
  getStocksTradesLatest,
  type CashDividend,
  type CashMerger,
  type CorporateActions,
  type CryptoBar,
  type CryptoBars,
  type CryptoBarsLatest,
  type CryptoOrderbook,
  type CryptoOrderbookEntry,
  type CryptoOrderbooksLatest,
  type CryptoQuote,
  type CryptoQuotes,
  type CryptoQuotesLatest,
  type CryptoSnapshots,
  type CryptoTrade,
  type CryptoTrades,
  type CryptoTradesLatest,
  type ForexRate,
  type ForexRates,
  type ForexRatesLatest,
  type ForwardSplit,
  type GetCryptoBarsLatestOptions,
  type GetCryptoBarsOptions,
  type GetCryptoOrderbooksLatestOptions,
  type GetCryptoQuotesLatestOptions,
  type GetCryptoQuotesOptions,
  type GetCryptoSnapshotsOptions,
  type GetCryptoTradesLatestOptions,
  type GetCryptoTradesOptions,
  type GetForexRatesLatestOptions,
  type GetForexRatesOptions,
  type GetLogoOptions,
  type GetNewsOptions,
  type GetOptionsBarsOptions,
  type GetOptionsSnapshotsOptions,
  type GetOptionsTradesLatestOptions,
  type GetOptionsTradesOptions,
  type GetStocksAuctionsOptions,
  type GetStocksBarsLatestOptions,
  type GetStocksBarsOptions,
  type GetStocksConditionsOptions,
  type GetStocksCorporateActionsOptions,
  type GetStocksMarketMoversOptions,
  type GetStocksMostActivesOptions,
  type GetStocksQuotesLatestOptions,
  type GetStocksQuotesOptions,
  type GetStocksSnapshotsOptions,
  type GetStocksTradesLatestOptions,
  type GetStocksTradesOptions,
  type Logo,
  type MarketMover,
  type MarketMovers,
  type MostActive,
  type MostActives,
  type NameChange,
  type OptionBar,
  type OptionsBars,
  type OptionsExchanges,
  type OptionsSnapshots,
  type OptionsSnapshotsQuote,
  type OptionsSnapshotsTrade,
  type OptionsTrades,
  type OptionsTradesLatest,
  type Redemption,
  type ReverseSplit,
  type Sort,
  type SpinOff,
  type StockAndCashMerger,
  type StockBar,
  type StockDividend,
  type StockMerger,
  type StockQuote,
  type StockSnapshots,
  type StockTrade,
  type StocksAuction,
  type StocksAuctionPrice,
  type StocksAuctions,
  type StocksBar,
  type StocksBars,
  type StocksBarsLatest,
  type StocksConditions,
  type StocksExchangeCodes,
  type StocksQuotes,
  type StocksQuotesLatest,
  type StocksTrades,
  type StocksTradesLatest,
  type UnitSplit,
  type WorthlessRemoval,
} from "./api/marketData.ts";

export {
  cancelOrder,
  cancelOrders,
  closePosition,
  closePositions,
  createCryptoTransfer,
  createOrder,
  createWatchlist,
  deleteWatchlist,
  exerciseOption,
  getAccount,
  getActivities,
  getActivity,
  getAsset,
  getAssets,
  getCalendar,
  getClock,
  getConfigurations,
  getCorporateAction,
  getCorporateActions,
  getCryptoTransfer,
  getCryptoTransfers,
  getCryptoWallet,
  getCryptoWallets,
  getCryptoWhitelistedAddress,
  getCryptoWhitelistedAddresses,
  getFeeEstimate,
  getOptionsContract,
  getOptionsContracts,
  getOrder,
  getOrders,
  getPortfolioHistory,
  getPosition,
  getPositions,
  getWatchlist,
  getWatchlists,
  removeCryptoWhitelistedAddress,
  replaceOrder,
  requestCryptoWhitelistedAddress,
  updateConfigurations,
  updateWatchlist,
  type Account,
  type AccountStatus,
  type Activity,
  type Asset,
  type BaseOrder,
  type Calendar,
  type CancelOrderOptions,
  type Clock,
  type ClosePositionOptions,
  type Configurations,
  type CorporateAction,
  type CreateCryptoTransferOptions,
  type CreateOrderOptions,
  type CreateWatchlistOptions,
  type CryptoFee,
  type CryptoOrder,
  type CryptoTransfer,
  type CryptoTransferResponse,
  type CryptoWallet,
  type DeleteWatchlistOptions,
  type Direction,
  type EquityOrder,
  type ExerciseOption,
  type GetActivityOptions,
  type GetAssetOptions,
  type GetAssetsOptions,
  type GetCalendarOptions,
  type GetCorporateActionOptions,
  type GetCorporateActionsOptions,
  type GetCryptoFeeEstimateOptions,
  type GetCryptoTransferOptions,
  type GetCryptoTransfersOptions,
  type GetCryptoWhitelistedAddressOptions,
  type GetOptionsContractOptions,
  type GetOptionsContractsOptions,
  type GetOrderOptions,
  type GetOrdersOptions,
  type GetPortfolioHistoryOptions,
  type GetPositionOptions,
  type GetWalletOptions,
  type GetWatchlistOptions,
  type NonTradeActivity,
  type OptionsApprovedLevel,
  type OptionsContract,
  type OptionsOrder,
  type OptionsTradingLevel,
  type Order,
  type OrderClass,
  type PortfolioHistory,
  type PositionIntent,
  type RemoveCryptoWhitelistedAddressOptions,
  type ReplaceOrderOptions,
  type RequestCryptoWhitelistedAddressOptions,
  type Side,
  type StopLoss,
  type TakeProfit,
  type TimeInForce,
  type TradingActivity,
  type Type,
  type UnstableNumber,
  type UpdateConfigurationsOptions,
  type UpdateWatchlistOptions,
  type Watchlist,
  type WhitelistedAddress,
} from "./api/trade.ts";

export {
  baseURLs,
  createClient,
  type Client,
  type ClientContext,
  type CreateClientOptions,
  type RequestOptions,
} from "./factory/createClient.ts";

export { createStream } from "./factory/createStream.ts";

export {
  createTokenBucket,
  type TokenBucketOptions,
} from "./factory/createTokenBucket.ts";

export {
  mockFetch,
  type MockFetch,
  type MockResponse,
} from "./util/mockFetch.ts";
